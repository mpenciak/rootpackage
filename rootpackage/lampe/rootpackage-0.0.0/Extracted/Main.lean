-- Generated by lampe

import «rootpackage-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

noir_def «rootpackage-0.0.0»::make_diag<>(x: Field) -> Tuple<Field, Field, Field, Field> := {
  (#_makeData returning Tuple<Field, Field, Field, Field>)(x, x, x, x)
}

noir_def «rootpackage-0.0.0»::main<>(x: Field) -> Unit := {
  let (a, b, c, d) = («rootpackage-0.0.0»::make_diag<> as λ(Field) -> Tuple<Field, Field, Field, Field>)(x);
  let struct1 = («package1-0.0.0»::function_one<> as λ(Field) -> «package1-0.0.0»::StructOne<>)(a);
  let struct2 = («package2-0.0.0»::function_two<> as λ(Field) -> «package2-0.0.0»::StructTwo<>)(b);
  let struct3 = («package3-0.0.0»::function_three<> as λ(Field) -> «package3-0.0.0»::StructThree<>)(c);
  let struct4 = («package4-0.0.0»::function_four<> as λ(Field) -> «package4-0.0.0»::StructFour<>)(d);
  let fields = (#_makeData returning Tuple<Field, Field, Field, Field>)(((«package1-0.0.0»::StructOne<> as «package1-0.0.0»::TraitOne<>)::method_one<> as λ(«package1-0.0.0»::StructOne<>) -> Field)(struct1), ((«package2-0.0.0»::StructTwo<> as «package2-0.0.0»::TraitTwo<>)::method_two<> as λ(«package2-0.0.0»::StructTwo<>) -> Field)(struct2), ((«package3-0.0.0»::StructThree<> as «package3-0.0.0»::TraitThree<>)::method_three<> as λ(«package3-0.0.0»::StructThree<>) -> Field)(struct3), ((«package4-0.0.0»::StructFour<> as «package4-0.0.0»::TraitFour<>)::method_four<> as λ(«package4-0.0.0»::StructFour<>) -> Field)(struct4));
  (#_assert returning Unit)((#_fEq returning bool)(fields.0, fields.1));
  (#_assert returning Unit)((#_fEq returning bool)(fields.1, fields.2));
  (#_assert returning Unit)((#_fEq returning bool)(fields.2, fields.3));
  #_skip
}

def «rootpackage-0.0.0».Main.env : Env := Env.mk
  [«rootpackage-0.0.0::make_diag», «rootpackage-0.0.0::main»]
  []
