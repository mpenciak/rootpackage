-- Generated by lampe

import «rootpackage-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

namespace «rootpackage-0.0.0»
namespace Extracted

noir_def make_diag<>(x: Field) -> Tuple<Field, Field, Field, Field> := {
  (#_makeData returning Tuple<Field, Field, Field, Field>)(x, x, x, x)
}

noir_def main<>(x: Field) -> Unit := {
  let (a, b, c, d) = (make_diag<> as λ(Field) -> Tuple<Field, Field, Field, Field>)(x);
  let struct1 = (function_one<> as λ(Field) -> StructOne<>)(a);
  let struct2 = (function_two<> as λ(Field) -> StructTwo<>)(b);
  let struct3 = (function_three<> as λ(Field) -> StructThree<>)(c);
  let struct4 = (function_four<> as λ(Field) -> StructFour<>)(d);
  let fields = (#_makeData returning Tuple<Field, Field, Field, Field>)(((StructOne<> as TraitOne<>)::method_one<> as λ(StructOne<>) -> Field)(struct1), ((StructTwo<> as TraitTwo<>)::method_two<> as λ(StructTwo<>) -> Field)(struct2), ((StructThree<> as TraitThree<>)::method_three<> as λ(StructThree<>) -> Field)(struct3), ((StructFour<> as TraitFour<>)::method_four<> as λ(StructFour<>) -> Field)(struct4));
  (#_assert returning Unit)((#_fEq returning bool)(fields.0, fields.1));
  (#_assert returning Unit)((#_fEq returning bool)(fields.1, fields.2));
  (#_assert returning Unit)((#_fEq returning bool)(fields.2, fields.3));
  #_skip
}

def Main.env : Env := Env.mk
  [make_diag, main]
  []
